version: '3'

dotenv: ['.env']

# silent: true

vars:
  # Just to distinguish these relayer paths from other apps
  RELAYER_PATH_PREFIX: "ibc-chat"
  RELAYER_CHAIN_SERVER:
    neutron
  RELAYER_CHAIN_CLIENTS:
    kujira
    stargaze
    nois
  RELAYER_KEY_NAME: "default"
  IBC_CHANNEL_VERSION: "ibc-chat-001"
  CONTRACTS: 
    client
    server
  DESC_TARGETS: "[local | testnet]"
  DESC_CHAIN_IDS: "[{{.RELAYER_CHAIN_SERVER}} | {{splitList \" \" .RELAYER_CHAIN_CLIENTS | join \" | \"}}]"
  MEDIA_DEV_PORT_FRONTEND: 9000
  MEDIA_DEV_PORT_DEVTOOLS: 9001

tasks:

  ##### FRONTEND #####

  frontend-dev-*:
    desc: |
      frontend-dev-{{.DESC_TARGETS}}
      Starts the frontend in dev mode, run in its own terminal (not a background or one-off task)
    vars:
      TARGET: "{{index .MATCH 0}}"
    deps: [internal-frontend-localmedia, "internal-frontend-dev-nomedia-{{.TARGET}}"]

  frontend-build:
    desc: Builds the frontend, only used in CI / final delivery 
    dir: ./frontend
    env: 
      RUSTFLAGS: --cfg=web_sys_unstable_apis 
      CHAINENV: "testnet"
    cmds:
      - trunk build --release --public-url=https://dakom.github.io/ibc-chat/

  internal-frontend-dev-nomedia-*:
    internal: true
    dir: ./frontend
    vars:
      TARGET: "{{index .MATCH 0}}"
    env: 
      RUSTFLAGS: --cfg=web_sys_unstable_apis
      CHAINENV: "{{.TARGET}}"
    cmds:
      - trunk serve --features dev --watch . --watch ../packages/shared --watch ../packages/wallet

  internal-frontend-localmedia:
    internal: true
    dir: ./media/frontend
    cmds: 
      - http-server --gzip --cors -p {{.MEDIA_DEV_PORT_FRONTEND}}


  ##### CONTRACT BUILDING / DEPLOYING #####
  internal-contracts-build-native:
    internal: true
    vars:
      ARTIFACTS_DIR: "{{.USER_WORKING_DIR}}/artifacts" 
      CONTRACTS_DIR: "{{.USER_WORKING_DIR}}/contracts" 
      RELEASE_DIR: "{{.USER_WORKING_DIR}}/target/wasm32-unknown-unknown/release"
      INTERMEDIATE_SHAS: "{{.ARTIFACTS_DIR}}/checksums_intermediate.txt"

    cmds:
      - mkdir -p "{{.ARTIFACTS_DIR}}"
      - for: { var: CONTRACTS }
        cmd: cd "{{joinPath .CONTRACTS_DIR .ITEM}}" && RUSTFLAGS="-C link-arg=-s" cargo build --release --lib --target=wasm32-unknown-unknown
      - for: { var: CONTRACTS }
        cmd: echo "$(sha256sum -- '{{joinPath .RELEASE_DIR .ITEM}}.wasm' | sed 's,../target,target,g')" >> "{{.INTERMEDIATE_SHAS}}"
      - for: { var: CONTRACTS }
        cmd: wasm-opt -Os --signext-lowering "{{joinPath .RELEASE_DIR .ITEM}}.wasm" -o "{{joinPath .ARTIFACTS_DIR .ITEM}}.wasm" 
      - cd "{{.ARTIFACTS_DIR}}" && sha256sum -- *.wasm | tee checksums.txt

  internal-contracts-build-docker:
    internal: true
    dir: packages
    cmds:
      - docker run --rm -v "{{.USER_WORKING_DIR}}":/code
        --mount type=volume,source="$(basename "{{.USER_WORKING_DIR}}")_cache",target=/target
        --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry
        cosmwasm/workspace-optimizer:0.16.0

  internal-contracts-build-docker_arm:
    internal: true
    dir: packages
    cmds:
      - docker run --rm -v "{{.USER_WORKING_DIR}}":/code
        --mount type=volume,source="$(basename "{{.USER_WORKING_DIR}}")_cache",target=/target
        --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry
        cosmwasm/workspace-optimizer-arm64:0.16.0

  contracts-build:
    desc: |
      Builds the contracts
      The tool (native, docker, or docker_arm) is set via the CONTRACTS_BUILD_TOOL env var 
    cmds:
      - task: internal-contracts-build-{{.CONTRACTS_BUILD_TOOL}}

  contracts-deploy-*:
    desc: |
      contracts-deploy-{{.DESC_TARGETS}}
      Rebuilds and deploys the contracts (i.e. with fresh instantiation, new address and state)
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - task: contracts-build
      - task: internal-deployer-only-deploy-{{.TARGET}}


  contracts-migrate-*:
    desc: |
      contracts-migrate-{{.DESC_TARGETS}}
      Rebuilds and migrates the contracts (i.e. does not change contract addr or necessarily wipe state)
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - task: contracts-build
      - task: internal-deployer-only-migrate-{{.TARGET}}


  ##### RELAYER #####

  relayer-setup-*:
    desc: |
      relayer-setup-{{.DESC_TARGETS}}
      One-stop tool to setup the relayer, including chains, wallets, paths, clients, connections, and channels 
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds: 
      - task: internal-relayer-setup-failable-{{.TARGET}}
      - task: relayer-create-clients-{{.TARGET}}
      - task: relayer-create-connections-{{.TARGET}}
      - task: relayer-create-channels-{{.TARGET}}

  internal-relayer-setup-failable-*:
    internal: true
    vars:
      TARGET: "{{index .MATCH 0}}"
    # these setups are allowed to fail as part of the simple relayer-setup command
    # we assume the errors are because this setup part already exists
    ignore_error: true
    cmds: 
      - task: relayer-delete-chains-{{.TARGET}}
      - task: relayer-add-chains-{{.TARGET}}
      - task: relayer-add-wallet-{{.TARGET}}
      - task: relayer-create-paths-{{.TARGET}}

  relayer-delete-chains-*:
    desc: |
      relayer-delete-chains-{{.DESC_TARGETS}}
      Deletes the chains from the relayer 
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - rly chains delete {{.RELAYER_CHAIN_SERVER}}-{{.TARGET}}
      - for: { var: RELAYER_CHAIN_CLIENTS }
        cmd: rly chains delete {{.ITEM}}-{{.TARGET}}

  relayer-add-chains-*:
    desc: |
      relayer-add-chains-{{.DESC_TARGETS}}
      Add the chains to the relayer 
      not required to be called separately, use relayer-setup instead
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - task: internal-relayer-add-chain
        vars:
          ID: "{{.RELAYER_CHAIN_SERVER}}"
          TARGET: "{{.TARGET}}"
      - for: { var: RELAYER_CHAIN_CLIENTS }
        task: internal-relayer-add-chain
        vars:
          ID: "{{.ITEM}}"
          TARGET: "{{.TARGET}}"

  internal-relayer-add-chain:
    internal: true
    vars:
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
      RPC_URL:
        sh: jq -r '.{{.ID}}_local.rpc_url' network.json
      ACCOUNT_PREFIX:
        sh: jq -r '.{{.ID}}_local.addr_prefix' network.json
      DENOM:
        sh: jq -r '.{{.ID}}_local.denom' network.json
    cmds:
      - echo "{{.ID}}" - "{{.TARGET}}" - "{{.CHAIN_ID}}"
      - jq --arg relayer_key "{{.RELAYER_KEY_NAME}}" --arg chain_id "{{.CHAIN_ID}}" --arg rpc_addr "{{.RPC_URL}}" --arg account_prefix "{{.ACCOUNT_PREFIX}}" --arg gas_prices "0.025{{.DENOM}}" '.value["chain-id"] = $chain_id | .value["rpc-addr"] = $rpc_addr | .value["account-prefix"] = $account_prefix | .value["gas-prices"] = $gas_prices | .value["key"] = $relayer_key' relayer.json > "tmp-relayer-{{.ID}}.json"
      - rly chains add --file "./tmp-relayer-{{.ID}}.json" "{{.ID}}-{{.TARGET}}"
      - rm -f tmp-relayer-{{.ID}}.json


  relayer-add-wallet-*:
    desc: |
      relayer-add-wallet-{{.DESC_TARGETS}}
      Add the wallet (setup in .env) to the relayer 
      not required to be called separately, use relayer-setup instead
    ignore_error: true
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - rly keys delete {{.RELAYER_CHAIN_SERVER}}-{{.TARGET}} {{.RELAYER_KEY_NAME}} -y
      - rly keys restore {{.RELAYER_CHAIN_SERVER}}-{{.TARGET}} {{.RELAYER_KEY_NAME}} "{{.RELAYER_SEED_PHRASE}}"
      - for: { var: RELAYER_CHAIN_CLIENTS }
        cmd: rly keys delete {{.ITEM}}-{{.TARGET}} {{.RELAYER_KEY_NAME}} -y
      - for: { var: RELAYER_CHAIN_CLIENTS }
        cmd: rly keys restore {{.ITEM}}-{{.TARGET}} {{.RELAYER_KEY_NAME}} "{{.RELAYER_SEED_PHRASE}}"

  relayer-check-wallet-*:
    desc: |
      relayer-check-wallet-{{.DESC_TARGETS}}
      checks that all wallets are setup correctly for the relayer
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - rly q balance {{.RELAYER_CHAIN_SERVER}}-{{.TARGET}}
      - for: { var: RELAYER_CHAIN_CLIENTS }
        cmd: rly q balance {{.ITEM}}-{{.TARGET}}
  
  relayer-create-paths-*:
    desc: |
      relayer-create-paths-{{.DESC_TARGETS}}
      creates the paths for the relayer
      not required to be called separately, use relayer-setup instead
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - for: { var: RELAYER_CHAIN_CLIENTS }
        task: internal-relayer-create-path
        vars:
          ID: "{{.ITEM}}"
          TARGET: "{{.TARGET}}"

  internal-relayer-create-path:
    internal: true
    vars:
      SERVER_CHAIN_ID:
        sh: jq -r '.{{.RELAYER_CHAIN_SERVER}}_{{.TARGET}}.chain_id' network.json
      CLIENT_CHAIN_ID:
        sh: jq -r '.{{.ID}}_{{.TARGET}}.chain_id' network.json
    cmds:
      - rly paths new {{.SERVER_CHAIN_ID}} {{.CLIENT_CHAIN_ID}} {{.RELAYER_PATH_PREFIX}}-{{.RELAYER_CHAIN_SERVER}}-{{.ID}}-{{.TARGET}} 
  
  relayer-create-clients-*:
    desc: |
      relayer-create-clients-{{.DESC_TARGETS}}
      creates the clients for the relayer
      not required to be called separately, use relayer-setup instead
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - for: { var: RELAYER_CHAIN_CLIENTS }
        task: internal-relayer-create-client
        vars:
          ID: "{{.ITEM}}"
          TARGET: "{{.TARGET}}"

  internal-relayer-create-client:
    internal: true
    vars:
      SERVER_CHAIN_ID:
        sh: jq -r '.{{.RELAYER_CHAIN_SERVER}}_{{.TARGET}}.chain_id' network.json
      CLIENT_CHAIN_ID:
        sh: jq -r '.{{.ID}}_{{.TARGET}}.chain_id' network.json
    cmds:
      - rly transact client {{.RELAYER_CHAIN_SERVER}}-{{.TARGET}} {{.ID}}-{{.TARGET}} {{.RELAYER_PATH_PREFIX}}-{{.RELAYER_CHAIN_SERVER}}-{{.ID}}-{{.TARGET}} --override
  
  relayer-create-connections-*:
    desc: |
      relayer-create-connections-{{.DESC_TARGETS}}
      creates the connections for the relayer
      not required to be called separately, use relayer-setup instead
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - for: { var: RELAYER_CHAIN_CLIENTS }
        task: internal-relayer-create-connection
        vars:
          ID: "{{.ITEM}}"
          TARGET: "{{.TARGET}}"

  internal-relayer-create-connection:
    internal: true
    vars:
      SERVER_CHAIN_ID:
        sh: jq -r '.{{.RELAYER_CHAIN_SERVER}}_{{.TARGET}}.chain_id' network.json
      CLIENT_CHAIN_ID:
        sh: jq -r '.{{.ID}}_{{.TARGET}}.chain_id' network.json
    cmds:
      - rly transact connection {{.RELAYER_PATH_PREFIX}}-{{.RELAYER_CHAIN_SERVER}}-{{.ID}}-{{.TARGET}} --override


  relayer-create-channels-*:
    desc: |
      relayer-create-channels-{{.DESC_TARGETS}}
      creates the channels for the relayer
      run this whenever contract addresses change
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - for: { var: RELAYER_CHAIN_CLIENTS }
        task: internal-relayer-create-channel
        vars:
          ID: "{{.ITEM}}"
          TARGET: "{{.TARGET}}"

  internal-relayer-create-channel:
    internal: true
    vars:
      SERVER_IBC_PORT:
        sh: jq -r '.{{.RELAYER_CHAIN_SERVER}}.{{.TARGET}}.server.ibcPort' deploy.json
      CLIENT_IBC_PORT:
        sh: jq -r '.{{.ID}}.{{.TARGET}}.client.ibcPort' deploy.json
    cmds:
      - rly transact channel {{.RELAYER_PATH_PREFIX}}-{{.RELAYER_CHAIN_SERVER}}-{{.ID}}-{{.TARGET}} --src-port {{.SERVER_IBC_PORT}} --dst-port {{.CLIENT_IBC_PORT}} --order unordered --version {{.IBC_CHANNEL_VERSION}} --debug --override
  
  relayer-start-*:
    desc: |
      relayer-start-{{.DESC_TARGETS}}
      start the relayer
    vars:
      TARGET: "{{index .MATCH 0}}"
    # TODO - can these be parallelized and dynamic?
    deps: [
      "internal-relayer-start-kujira-{{.TARGET}}",
      "internal-relayer-start-stargaze-{{.TARGET}}",
      "internal-relayer-start-nois-{{.TARGET}}",
    ]

  internal-relayer-start-*-*:
    internal: true
    vars:
      ID: "{{index .MATCH 0}}"
      TARGET: "{{index .MATCH 1}}"
    cmds:
      - rly start {{.RELAYER_PATH_PREFIX}}-{{.RELAYER_CHAIN_SERVER}}-{{.ID}}-{{.TARGET}} --debug-addr="localhost:0"

  ##### LOCAL CHAINS #####

  chains-create:
    desc: create all the local chain containers in docker
    deps: [internal-chain-create-neutron, internal-chain-create-kujira, internal-chain-create-stargaze, internal-chain-create-nois]

  chains-start:
    desc: start all the local chains (requires chains-create) 
    deps: [internal-chain-start-neutron, internal-chain-start-kujira, internal-chain-start-stargaze, internal-chain-start-nois]
  
  chains-stop:
    desc: stop all the local chains
    deps: [internal-chain-stop-neutron, internal-chain-stop-kujira, internal-chain-stop-stargaze, internal-chain-stop-nois]

  chains-delete:
    desc: delete all the local chains from docker
    deps: [internal-chain-delete-neutron, internal-chain-delete-kujira, internal-chain-delete-stargaze, internal-chain-delete-nois]

 ##### DOCKER CHAIN SETUP ##### 
 # All of these except for `sh` are internal, since they're run as groups above
  chain-sh-*:
    desc: |
      chain-sh-{{.DESC_CHAIN_IDS}}
      Opens a shell in the chain container, helpful for debugging
    env: 
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    vars:
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
    cmds:
      - docker exec -it {{.CHAIN_ID}} /bin/sh 
  internal-chain-create-*:
    internal: true
    vars:
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
      FEE_DENOM:
        sh: jq -r '.{{.ID}}_local.denom' network.json
      STAKE_DENOM: "{{.FEE_DENOM}}" 
      RPC_PORT:
        sh: jq -r '.{{.ID}}_local.rpc_url' network.json | sed -E 's/.*:([0-9]+).*/\1/' 
      REST_PORT:
        sh: jq -r '.{{.ID}}_local.rest_url' network.json | sed -E 's/.*:([0-9]+).*/\1/' 
      BINARY:
        sh: jq -r '.{{.ID}}_local.binary' network.json
      DOCKER_IMAGE: "local-{{.ID}}"
      TIMEOUT:
        sh: jq -r '.{{.ID}}_local.timeout' network.json
      VOLUME_NAME: "{{.CHAIN_ID}}_data"
      CHAIN_DIR:
        sh: jq -r '.{{.ID}}_local.chain_dir' network.json
      CONFIG_FILE: "{{.CHAIN_DIR}}/config/config.toml"
      APP_FILE: "{{.CHAIN_DIR}}/config/app.toml"
      GENESIS_FILE: "{{.CHAIN_DIR}}/config/genesis.json"
      GENESIS_DENOM_KEYS:
        denom
        mint_denom
        bond_denom
      GENESIS_CMD: '{{ if eq .ID "neutron" "nois" }}{{else}}genesis {{end}}'
    cmds:
      - task: internal-chain-delete-{{.ID}}
      - echo "Creating chain {{.CHAIN_ID}}"
      # create the docker instance
      - docker run -d --name {{.CHAIN_ID}} 
        --entrypoint ""
        -p {{.RPC_PORT}}:26657 -p {{.REST_PORT}}:1317 
        --mount type=volume,source={{.VOLUME_NAME}},target=/root 
        "{{.DOCKER_IMAGE}}"
        tail -f /dev/null

      # inspiration:
      # https://github.com/neutron-org/neutron/blob/main/network/init.sh
      # https://github.com/CosmWasm/wasmd/blob/main/scripts/contrib/local/setup_wasmd.sh
      # https://github.com/osmosis-labs/localosmosis-archive/blob/main/README.md#pro-tip-speed-up-block-time
      #
      # initialize the chain
      - |
        docker exec {{.CHAIN_ID}} /bin/sh -c '
        if [ "{{.ID}}" = "neutron" ]
        then
          export CHAINID="{{.CHAIN_ID}}"
          export STAKEDENOM="{{.STAKE_DENOM}}"
          cd /opt/neutron && make install-test-binary
          bash /opt/neutron/network/init.sh
          bash /opt/neutron/network/init-neutrond.sh
        else
          {{.BINARY}} init test --home "{{.CHAIN_DIR}}" --chain-id="{{.CHAIN_ID}}"
        fi'
      # create accounts
      - docker exec {{.CHAIN_ID}} /bin/sh -c 'echo "{{.VALIDATOR_SEED_PHRASE}}" | {{.BINARY}} keys add validator --home "{{.CHAIN_DIR}}" --keyring-backend=test --recover'
      - docker exec {{.CHAIN_ID}} {{.BINARY}} {{.GENESIS_CMD}}add-genesis-account validator "100000000000000{{.STAKE_DENOM}}" --home "{{.CHAIN_DIR}}" --keyring-backend=test
      - |
        docker exec {{.CHAIN_ID}} /bin/sh -c '
        if [ "{{.CLI_SEED_PHRASE}}" != "{{.VALIDATOR_SEED_PHRASE}}" ]
        then
          echo "{{.CLI_SEED_PHRASE}}" | {{.BINARY}} keys add cli --home "{{.CHAIN_DIR}}" --keyring-backend=test --recover
          {{.BINARY}} {{.GENESIS_CMD}}add-genesis-account cli "100000000000000{{.STAKE_DENOM}}" --home "{{.CHAIN_DIR}}" --keyring-backend=test
        fi'
      - |
        docker exec {{.CHAIN_ID}} /bin/sh -c '
        if [ "{{.RELAYER_SEED_PHRASE}}" != "{{.VALIDATOR_SEED_PHRASE}}" ] && [ "{{.RELAYER_SEED_PHRASE}}" != "{{.CLI_SEED_PHRASE}}" ]
        then
          echo "{{.RELAYER_SEED_PHRASE}}" | {{.BINARY}} keys add relayer --home "{{.CHAIN_DIR}}" --keyring-backend=test --recover
          {{.BINARY}} {{.GENESIS_CMD}}add-genesis-account relayer "100000000000000{{.STAKE_DENOM}}" --home "{{.CHAIN_DIR}}" --keyring-backend=test
        fi'
      - |
        docker exec {{.CHAIN_ID}} /bin/sh -c '
        if [ "{{.USER_SEED_PHRASE}}" != "{{.VALIDATOR_SEED_PHRASE}}" ] && [ "{{.USER_SEED_PHRASE}}" != "{{.CLI_SEED_PHRASE}}" ] && [ "{{.USER_SEED_PHRASE}}" != "{{.RELAYER_SEED_PHRASE}}" ]
        then
          echo "{{.USER_SEED_PHRASE}}" | {{.BINARY}} keys add user --home "{{.CHAIN_DIR}}" --keyring-backend=test --recover
          {{.BINARY}} {{.GENESIS_CMD}}add-genesis-account user "100000000000000{{.STAKE_DENOM}}" --home "{{.CHAIN_DIR}}" --keyring-backend=test
        fi'
      # submit genesis validator tx if not on neutron
      - |
        docker exec {{.CHAIN_ID}} /bin/sh -c '
        if [ "{{.ID}}" != "neutron" ]
        then
          {{.BINARY}} {{.GENESIS_CMD}}gentx validator "250000000{{.STAKE_DENOM}}" --chain-id="{{.CHAIN_ID}}" --keyring-backend=test --home "{{.CHAIN_DIR}}"
          {{.BINARY}} {{.GENESIS_CMD}}collect-gentxs --home "{{.CHAIN_DIR}}"
        fi'
      # set the block time to be fast 
      - docker exec {{.CHAIN_ID}} sed -E -i '/timeout_(propose|prevote|precommit|commit)/s/[0-9]+m?s/{{.TIMEOUT}}/' "{{.CONFIG_FILE}}"
      # set the minimum gas prices to 0
      - docker exec {{.CHAIN_ID}} sed -E -i 's/minimum-gas-prices = "[^"]*"/minimum-gas-prices = "0{{.STAKE_DENOM}}"/g' "{{.APP_FILE}}" 
      # enable unsafe cors
      - docker exec {{.CHAIN_ID}} sed -E -i 's/enabled-unsafe-cors *= *false/enabled-unsafe-cors = true/g' "{{.APP_FILE}}" 
      - docker exec {{.CHAIN_ID}} sed -E -i 's/cors_allowed_origins = \[[^]]*\]/cors_allowed_origins = ["*"]/' "{{.CONFIG_FILE}}" 
      # replace url to listen on all ip addresses
      - docker exec {{.CHAIN_ID}} sed -E -i 's/tcp:\/\/[^:]+:/tcp:\/\/0.0.0.0:/g' {{.APP_FILE}}
      - docker exec {{.CHAIN_ID}} sed -E -i 's/tcp:\/\/[^:]+:/tcp:\/\/0.0.0.0:/g' {{.CONFIG_FILE}}
      # replace denom in genesis file
      - for: { var: GENESIS_DENOM_KEYS }
        cmd: |
          docker exec {{.CHAIN_ID}} sed -E -i 's/"{{.ITEM}}"[[:space:]]*:[[:space:]]*"stake"/"{{.ITEM}}": "{{.STAKE_DENOM}}"/g' "{{.GENESIS_FILE}}" 
      # stop the docker instance
      - docker kill {{.CHAIN_ID}}
  
  internal-chain-delete-*:
    internal: true
    env: 
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    vars:
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
      VOLUME_NAME: "{{.CHAIN_ID}}_data"
      DOCKER_IMAGE: "local-{{.ID}}"
    # allow this command to fail
    ignore_error: true  
    cmds:
      - echo "Deleting chain {{.CHAIN_ID}}"
      - docker kill {{.CHAIN_ID}}
      - docker rm {{.CHAIN_ID}}
      - docker volume rm -f {{.VOLUME_NAME}} 

  internal-chain-stop-*:
    internal: true
    env: 
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    vars:
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
    ignore_error: true  
    cmds:
      - docker kill {{.CHAIN_ID}}
  
  internal-chain-start-*:
    internal: true
    env: 
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    vars:
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
      BINARY:
        sh: jq -r '.{{.ID}}_local.binary' network.json
      CHAIN_DIR:
        sh: jq -r '.{{.ID}}_local.chain_dir' network.json
    cmds:
      - docker restart {{.CHAIN_ID}}
      - docker exec -d {{.CHAIN_ID}} {{.BINARY}} start --home "{{.CHAIN_DIR}}"

  
  ##### CLI PREP (both deployer and onchain-tests) #####

  cli-prepare:
    desc: Prepares the CLI for deployment and onchain tests. one-time setup
    deps: [internal-cli-prepare-deployer, internal-cli-prepare-onchain-tests]
    
  internal-cli-prepare-deployer:
    internal: true
    dir: deployer
    cmds:
      - npm install
      - task: deployer-build

  internal-cli-prepare-onchain-tests:
    internal: true
    dir: onchain-tests
    cmds:
      - npm install
      - task: onchain-tests-build

  ##### DEPLOYER #####
  # These tasks are all internal, since it doesn't make sense to run them outside of contract tasks

  deployer-build:
    desc: Builds the deployer. Only need to run this if the deployer tool itself changes (e.g. contract Instantiation / Migration messages change)
    dir: deployer
    cmds:
      - npm run build 

  internal-deployer-only-deploy-*:
    internal: true
    dir: deployer
    vars:
      TARGET: "{{index .MATCH 0}}"
    env: 
      CHAINENV: "{{.TARGET}}"
      CLI_SEED_PHRASE: "{{.CLI_SEED_PHRASE}}"
    cmds:
      - node dist/js/deployer.js --action=deploy

  internal-deployer-migrate-*:
    internal: true
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - task: deployer-build
      - task: internal-deployer-only-migrate-{{.TARGET}} 

  internal-deployer-only-migrate-*:
    internal: true
    dir: deployer
    vars:
      TARGET: "{{index .MATCH 0}}"
    env: 
      CHAINENV: "{{.TARGET}}"
      CLI_SEED_PHRASE: "{{.CLI_SEED_PHRASE}}"
    cmds:
      - node dist/js/deployer.js --action=migrate

  #### TESTS #### 

  onchain-tests-build:
    desc: Rebuilds the test-runner tool. Typically used with test-only-onchain-*
    internal: true
    dir: onchain-tests 
    cmds:
      - npm run build 

  test-onchain-*:
    desc: |
      test-onchain-{{.DESC_TARGETS}}
      Rebuilds the test-runner tool and runs onchain tests for the specified target
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - task: onchain-tests-build
      - task: test-only-onchain-{{.TARGET}} 

  test-only-onchain-*:
    desc: |
      test-only-onchain-{{.DESC_TARGETS}}
      Runs onchain tests for the specified target, assumes the test-runner tool is already built
    dir: onchain-tests
    vars:
      TARGET: "{{index .MATCH 0}}"
    env: 
      CHAINENV: "{{.TARGET}}"
      CLI_SEED_PHRASE: "{{.CLI_SEED_PHRASE}}"
    cmds:
      - node dist/js/onchain-tests.js

  test-offchain:
    desc: Run offchain / multi-test tests
    dir: offchain-tests 
    cmds:
      - cargo test

  #### DEV TOOLS #### 
  dev-tools-gui:
    desc: Starts the dev tools GUI (in dev mode)
    dir: ./dev-tools/tauri
    cmds:
      - cargo tauri dev

  dev-tools-cli:
    desc: Starts the dev tools CLI (in dev mode)
    dir: ./dev-tools/cli
    cmds:
      - cargo run -- {{.CLI_ARGS}}

  dev-tools-web:
    deps: [internal-dev-tools-localmedia, internal-dev-tools-web]
    desc: Starts just the frontend of the dev tools GUI, helps with debugging ui-only issues faster.

  internal-dev-tools-web:
    internal: true
    dir: ./dev-tools
    env: 
      TAURI_INVOKE: "mock"
      TAURI_MEDIA: "localserver"
    cmds:
      - trunk serve -d web/dist --features dev --watch web --watch shared --watch ../packages/shared web/index.html 

  internal-dev-tools-localmedia:
    internal: true
    dir: ./media/dev-tools
    cmds: 
      - http-server --gzip --cors -p {{.MEDIA_DEV_PORT_DEVTOOLS}}